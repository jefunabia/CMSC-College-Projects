function selection_sort(params) {
  // Outer loop - Loop through the array
  for (let i = 0; i < params.length; i++) {
    // Initially set the MIN to first element in array
    let min_index = i;
    // Inner loop - Loop through the next element of i in the array to find the min
    for (let j = i + 1; j < params.length; j++) {
      // If min is found, change value of min
      if (params[j] < params[min_index]) {
        min_index = j;
      }
    }
    // Swap values of min and i
    [params[i], params[min_index]] = [params[min_index], params[i]];
  }
  return params;
}

function radix_sort(params) {
  const maxNum = Math.max(...params) * 10;
  let divisor = 10;
  while (divisor < maxNum) {
    // Create buckets of 0-9
    let buckets = [...Array(10)].map(() => []);
    // For each number, get the current significant digit and place it in the respective bucket
    for (let num of params) {
      buckets[Math.floor((num % divisor) / (divisor / 10))].push(num);
    }
    params = [].concat.apply([], buckets);
    // Move to the next significant digit
    divisor *= 10;
  }
  return params;
}

function merge_sort(params) {
  if (params.length <= 1) {
    return params;
  }

  // Find the middle
  let middle = Math.floor(params.length / 2);

  // Divide the array into left and right
  let left = params.slice(0, middle);
  let right = params.slice(middle);

  // Use recursion to combine left and right
  return merge(
    merge_sort(left), merge_sort(right)
  );
}

function merge(left, right) {
  let resultArray = [];
  let leftIndex = 0;
  let rightIndex = 0;

  while (leftIndex < left.length && rightIndex < right.length) {
    if (left[leftIndex] < right[rightIndex]) {
      resultArray.push(left[leftIndex]);
      leftIndex++;
    } else {
      resultArray.push(right[rightIndex]);
      rightIndex++;
    }
  }

  return resultArray
    .concat(left.slice(leftIndex))
    .concat(right.slice(rightIndex));
}

function copy_array(array) {
  let new_arr = [];

  new_arr = Array.from(array);
  return new_arr;
}

function create_graph(index, id, selection_sort, radix_sort, merge_sort) {
  var data = [
    {
      x: ['Selection Sort', 'Radix Sort', 'Merge Sort'],
      y: [selection_sort[index], radix_sort[index], merge_sort[index]],
      type: 'bar'
    }
  ];

  var layout = {
    xaxis: {
      title: {
        text: 'Sorting Algorithm',

      },
    },
    yaxis: {
      title: {
        text: 'ms',
      }
    }
  };

  Plotly.newPlot(id, data, layout);
}

function median(sequence) {
  sequence.sort();
  return sequence[Math.ceil(sequence.length / 2)];
}


function calculate_sort(avg_case_data, worst_case_data, best_case_data, callback) {
  let values = [];
  let res_arr = [];
  let res_arr2 = [];
  let res_arr3 = [];
  let res = 0;
  let res2 = 0;
  let res3 = 0;
  let t1 = 0;
  let t2 = 0;
  let t3 = 0;
  let t4 = 0;
  let t5 = 0;
  let t6 = 0;

  // For average case data
  for (let i = 0; i < 50; i++) {
    t1 = performance.now();
    callback(avg_case_data);
    t2 = performance.now();
    res_arr.push(t2 - t1);
  }
  res = median(res_arr).toFixed(4);
  console.log("[AVG] It took " + res + ' ms');
  values.push(res);

  // For worst case data
  for (let i = 0; i < 50; i++) {
    t3 = performance.now();
    callback(worst_case_data);
    t4 = performance.now();
    res_arr2.push(t4 - t3);
  }
  res2 = median(res_arr2).toFixed(4);
  console.log("[WORST] It took " + res2 + ' ms');
  values.push(res2);

  // For best case data
  for (let i = 0; i < 50; i++) {
    t5 = performance.now();
    callback(best_case_data);
    t6 = performance.now();
    res_arr3.push(t6 - t5);
  }
  res3 = median(res_arr3).toFixed(4);
  console.log("[BEST] It took " + res3 + ' ms');
  values.push(res3);
  console.log("==============================================================");

  return values;
}

function run_data(avg_case_data, worst_case_data, best_case_data, max) {

  const avg_case_copy = copy_array(avg_case_data);
  const worst_case_copy = copy_array(worst_case_data);
  const best_case_copy = copy_array(best_case_data);

  const avg_case_copy2 = copy_array(avg_case_data);
  const worst_case_copy2 = copy_array(worst_case_data);
  const best_case_copy2 = copy_array(best_case_data);

  console.log(avg_case_data);
  console.log(worst_case_data);
  console.log(best_case_data);

  let ss = calculate_sort(avg_case_data, worst_case_data, best_case_data, selection_sort);
  let rs = calculate_sort(avg_case_copy, worst_case_copy, best_case_copy, radix_sort);
  let ms = calculate_sort(avg_case_copy2, worst_case_copy2, best_case_copy2, merge_sort);

  create_graph(0, max + '-avg', ss, rs, ms);
  create_graph(1, max + '-worst', ss, rs, ms);
  create_graph(2, max + '-best', ss, rs, ms);

}

const data_10 = [525, 604, 695, 967, 39, 227, 878, 986, 845, 507];
const data_10_best = [39, 227, 507, 525, 604, 695, 845, 878, 967, 986];
const data_10_worst = [986, 967, 878, 845, 695, 604, 525, 507, 227, 39];

const data_100 = [241, 437, 954, 658, 112, 872, 602, 577, 469, 867, 446, 658, 50, 978, 474, 782, 455, 101, 153, 369, 420, 843, 566, 39, 812, 395, 679, 379, 681, 15, 139, 430, 803, 330, 845, 631, 498, 146, 814, 832, 851, 862, 92, 352, 574, 784, 847, 361, 555, 717, 894, 225, 216, 990, 626, 862, 801, 813, 848, 694, 333, 833, 469, 742, 800, 187, 287, 981, 30, 329, 645, 195, 929, 130, 83, 281, 754, 22, 20, 762, 316, 339, 903, 229, 998, 846, 424, 879, 77, 354, 670, 435, 532, 893, 663, 399, 638, 608, 789, 400];
const data_100_best = [15, 20, 22, 30, 39, 50, 77, 83, 92, 101, 112, 130, 139, 146, 153, 187, 195, 216, 225, 229, 241, 281, 287, 316, 329, 330, 333, 339, 352, 354, 361, 369, 379, 395, 399, 400, 420, 424, 430, 435, 437, 446, 455, 469, 469, 474, 498, 532, 555, 566, 574, 577, 602, 608, 626, 631, 638, 645, 658, 658, 663, 670, 679, 681, 694, 717, 742, 754, 762, 782, 784, 789, 800, 801, 803, 812, 813, 814, 832, 833, 843, 845, 846, 847, 848, 851, 862, 862, 867, 872, 879, 893, 894, 903, 929, 954, 978, 981, 990, 998];
const data_100_worst = [998, 990, 981, 978, 954, 929, 903, 894, 893, 879, 872, 867, 862, 862, 851, 848, 847, 846, 845, 843, 833, 832, 814, 813, 812, 803, 801, 800, 789, 784, 782, 762, 754, 742, 717, 694, 681, 679, 670, 663, 658, 658, 645, 638, 631, 626, 608, 602, 577, 574, 566, 555, 532, 498, 474, 469, 469, 455, 446, 437, 435, 430, 424, 420, 400, 399, 395, 379, 369, 361, 354, 352, 339, 333, 330, 329, 316, 287, 281, 241, 229, 225, 216, 195, 187, 153, 146, 139, 130, 112, 101, 92, 83, 77, 50, 39, 30, 22, 20, 15];

const data_1000 = [50, 148, 393, 354, 439, 692, 445, 415, 443, 926, 30, 366, 126, 670, 762, 162, 327, 336, 716, 734, 944, 465, 88, 971, 135, 865, 189, 230, 613, 563, 472, 196, 447, 655, 280, 871, 607, 303, 573, 36, 337, 86, 829, 969, 8, 940, 103, 962, 637, 108, 998, 313, 300, 358, 488, 824, 321, 932, 282, 25, 698, 399, 973, 907, 287, 977, 453, 821, 448, 497, 347, 840, 238, 506, 995, 695, 401, 446, 154, 412, 622, 870, 603, 568, 666, 101, 418, 746, 480, 271, 201, 638, 317, 283, 742, 798, 762, 817, 519, 635, 675, 839, 912, 917, 495, 565, 40, 873, 687, 594, 394, 192, 352, 261, 544, 438, 171, 180, 666, 7, 591, 791, 318, 297, 212, 845, 859, 31, 2, 417, 93, 490, 187, 905, 587, 518, 894, 389, 980, 502, 292, 212, 976, 477, 331, 649, 304, 984, 539, 498, 240, 276, 228, 887, 784, 264, 868, 134, 737, 44, 303, 420, 714, 658, 157, 728, 907, 837, 30, 393, 980, 138, 338, 820, 967, 321, 273, 122, 911, 673, 967, 932, 201, 543, 542, 865, 174, 784, 413, 306, 11, 619, 940, 58, 837, 926, 193, 834, 871, 145, 902, 994, 839, 16, 792, 376, 645, 452, 253, 572, 321, 406, 506, 653, 278, 284, 156, 242, 508, 600, 878, 529, 347, 866, 87, 803, 493, 857, 512, 218, 753, 18, 639, 385, 738, 658, 450, 532, 672, 164, 785, 991, 973, 719, 340, 506, 642, 987, 722, 459, 517, 249, 14, 861, 605, 644, 331, 228, 308, 180, 987, 273, 232, 645, 324, 30, 691, 955, 345, 201, 836, 791, 962, 601, 897, 456, 881, 990, 514, 138, 923, 258, 431, 720, 951, 448, 210, 189, 155, 255, 568, 176, 539, 201, 752, 148, 748, 174, 515, 961, 891, 190, 261, 783, 263, 451, 446, 466, 695, 64, 901, 517, 917, 832, 303, 583, 271, 35, 125, 716, 719, 31, 485, 102, 486, 46, 156, 974, 835, 977, 295, 345, 521, 296, 893, 478, 60, 189, 363, 642, 906, 253, 343, 971, 141, 234, 866, 937, 831, 350, 431, 593, 267, 342, 519, 750, 898, 985, 277, 716, 323, 199, 601, 78, 802, 441, 921, 951, 672, 343, 662, 175, 478, 842, 146, 514, 266, 318, 537, 908, 373, 817, 455, 332, 716, 284, 202, 438, 599, 913, 574, 749, 216, 347, 122, 971, 482, 541, 411, 235, 220, 442, 257, 648, 327, 566, 10, 228, 306, 678, 702, 816, 33, 261, 54, 251, 192, 981, 10, 340, 895, 462, 498, 900, 926, 294, 456, 732, 894, 912, 220, 620, 658, 634, 963, 464, 244, 51, 143, 6, 138, 256, 156, 177, 166, 549, 353, 965, 417, 986, 575, 933, 262, 355, 376, 702, 620, 514, 130, 568, 44, 796, 523, 848, 305, 764, 1, 837, 65, 653, 12, 536, 370, 917, 624, 747, 239, 719, 966, 459, 602, 575, 696, 824, 708, 561, 56, 396, 521, 292, 217, 200, 499, 160, 807, 108, 316, 919, 397, 472, 668, 966, 900, 812, 823, 259, 733, 578, 211, 813, 730, 779, 768, 733, 481, 63, 287, 789, 940, 361, 515, 735, 711, 758, 86, 480, 790, 288, 251, 454, 766, 358, 399, 983, 712, 211, 625, 768, 466, 33, 280, 883, 761, 105, 154, 573, 611, 722, 371, 768, 786, 385, 82, 734, 18, 253, 414, 499, 211, 444, 283, 452, 714, 134, 468, 752, 943, 488, 283, 830, 71, 617, 207, 150, 588, 781, 58, 516, 782, 689, 855, 261, 524, 26, 218, 481, 471, 582, 951, 644, 878, 762, 859, 500, 952, 544, 903, 995, 491, 206, 528, 307, 891, 345, 981, 894, 904, 272, 889, 569, 63, 482, 149, 241, 107, 681, 17, 716, 234, 837, 305, 927, 79, 229, 588, 807, 532, 149, 111, 941, 175, 539, 711, 571, 140, 849, 736, 195, 706, 262, 897, 79, 196, 586, 554, 920, 58, 767, 687, 914, 375, 952, 540, 722, 827, 316, 766, 338, 11, 655, 895, 478, 585, 809, 929, 399, 290, 172, 212, 545, 311, 938, 25, 304, 308, 139, 269, 772, 863, 226, 796, 375, 428, 219, 407, 468, 740, 327, 75, 338, 650, 957, 866, 218, 194, 153, 3, 671, 923, 370, 284, 508, 518, 644, 657, 305, 459, 554, 483, 703, 208, 543, 413, 96, 657, 301, 36, 601, 643, 31, 365, 861, 52, 384, 526, 977, 167, 762, 24, 41, 707, 755, 777, 915, 148, 480, 798, 401, 910, 290, 758, 411, 873, 432, 225, 256, 922, 63, 968, 211, 140, 813, 247, 28, 967, 548, 914, 872, 569, 467, 745, 399, 297, 488, 757, 65, 444, 393, 371, 801, 180, 181, 392, 665, 315, 902, 539, 138, 443, 446, 789, 489, 289, 878, 725, 244, 956, 542, 2, 596, 451, 649, 908, 632, 386, 708, 729, 822, 796, 126, 318, 28, 474, 878, 935, 101, 25, 81, 17, 230, 691, 47, 545, 809, 957, 775, 200, 448, 345, 716, 582, 709, 662, 13, 260, 181, 303, 943, 868, 546, 383, 819, 453, 107, 171, 572, 76, 738, 479, 932, 201, 992, 96, 254, 629, 487, 267, 470, 805, 652, 545, 855, 596, 166, 359, 924, 965, 518, 44, 730, 460, 33, 445, 908, 367, 121, 887, 992, 122, 693, 641, 917, 379, 806, 203, 595, 197, 761, 522, 543, 617, 694, 78, 184, 458, 467, 303, 982, 149, 675, 7, 194, 122, 448, 298, 155, 764, 635, 292, 399, 617, 665, 869, 734, 583, 644, 788, 799, 469, 525, 33, 628, 255, 848, 678, 964, 50, 335, 787, 619, 173, 456, 339, 26, 643, 64, 289, 27, 122, 134, 575, 808, 130, 850, 349, 39, 842, 144, 559, 798, 159, 743, 86, 769, 426, 805, 533, 578, 542, 915, 674, 333, 915, 784, 993, 859, 432, 671, 847, 947, 380, 704, 157, 725, 646, 565, 3, 140, 414, 320, 842, 801, 745, 249, 60, 418, 606, 2, 984, 818, 88, 166, 980, 66, 15, 73, 41, 913, 220, 621, 709, 993, 111, 329, 501, 930, 346, 889, 144, 580];
const data_1000_best = [1, 2, 2, 2, 3, 3, 6, 7, 7, 8, 10, 10, 11, 11, 12, 13, 14, 15, 16, 17, 17, 18, 18, 24, 25, 25, 25, 26, 26, 27, 28, 28, 30, 30, 30, 31, 31, 31, 33, 33, 33, 33, 35, 36, 36, 39, 40, 41, 41, 44, 44, 44, 46, 47, 50, 50, 51, 52, 54, 56, 58, 58, 58, 60, 60, 63, 63, 63, 64, 64, 65, 65, 66, 71, 73, 75, 76, 78, 78, 79, 79, 81, 82, 86, 86, 86, 87, 88, 88, 93, 96, 96, 101, 101, 102, 103, 105, 107, 107, 108, 108, 111, 111, 121, 122, 122, 122, 122, 122, 125, 126, 126, 130, 130, 134, 134, 134, 135, 138, 138, 138, 138, 139, 140, 140, 140, 141, 143, 144, 144, 145, 146, 148, 148, 148, 149, 149, 149, 150, 153, 154, 154, 155, 155, 156, 156, 156, 157, 157, 159, 160, 162, 164, 166, 166, 166, 167, 171, 171, 172, 173, 174, 174, 175, 175, 176, 177, 180, 180, 180, 181, 181, 184, 187, 189, 189, 189, 190, 192, 192, 193, 194, 194, 195, 196, 196, 197, 199, 200, 200, 201, 201, 201, 201, 201, 202, 203, 206, 207, 208, 210, 211, 211, 211, 211, 212, 212, 212, 216, 217, 218, 218, 218, 219, 220, 220, 220, 225, 226, 228, 228, 228, 229, 230, 230, 232, 234, 234, 235, 238, 239, 240, 241, 242, 244, 244, 247, 249, 249, 251, 251, 253, 253, 253, 254, 255, 255, 256, 256, 257, 258, 259, 260, 261, 261, 261, 261, 262, 262, 263, 264, 266, 267, 267, 269, 271, 271, 272, 273, 273, 276, 277, 278, 280, 280, 282, 283, 283, 283, 284, 284, 284, 287, 287, 288, 289, 289, 290, 290, 292, 292, 292, 294, 295, 296, 297, 297, 298, 300, 301, 303, 303, 303, 303, 303, 304, 304, 305, 305, 305, 306, 306, 307, 308, 308, 311, 313, 315, 316, 316, 317, 318, 318, 318, 320, 321, 321, 321, 323, 324, 327, 327, 327, 329, 331, 331, 332, 333, 335, 336, 337, 338, 338, 338, 339, 340, 340, 342, 343, 343, 345, 345, 345, 345, 346, 347, 347, 347, 349, 350, 352, 353, 354, 355, 358, 358, 359, 361, 363, 365, 366, 367, 370, 370, 371, 371, 373, 375, 375, 376, 376, 379, 380, 383, 384, 385, 385, 386, 389, 392, 393, 393, 393, 394, 396, 397, 399, 399, 399, 399, 399, 401, 401, 406, 407, 411, 411, 412, 413, 413, 414, 414, 415, 417, 417, 418, 418, 420, 426, 428, 431, 431, 432, 432, 438, 438, 439, 441, 442, 443, 443, 444, 444, 445, 445, 446, 446, 446, 447, 448, 448, 448, 448, 450, 451, 451, 452, 452, 453, 453, 454, 455, 456, 456, 456, 458, 459, 459, 459, 460, 462, 464, 465, 466, 466, 467, 467, 468, 468, 469, 470, 471, 472, 472, 474, 477, 478, 478, 478, 479, 480, 480, 480, 481, 481, 482, 482, 483, 485, 486, 487, 488, 488, 488, 489, 490, 491, 493, 495, 497, 498, 498, 499, 499, 500, 501, 502, 506, 506, 506, 508, 508, 512, 514, 514, 514, 515, 515, 516, 517, 517, 518, 518, 518, 519, 519, 521, 521, 522, 523, 524, 525, 526, 528, 529, 532, 532, 533, 536, 537, 539, 539, 539, 539, 540, 541, 542, 542, 542, 543, 543, 543, 544, 544, 545, 545, 545, 546, 548, 549, 554, 554, 559, 561, 563, 565, 565, 566, 568, 568, 568, 569, 569, 571, 572, 572, 573, 573, 574, 575, 575, 575, 578, 578, 580, 582, 582, 583, 583, 585, 586, 587, 588, 588, 591, 593, 594, 595, 596, 596, 599, 600, 601, 601, 601, 602, 603, 605, 606, 607, 611, 613, 617, 617, 617, 619, 619, 620, 620, 621, 622, 624, 625, 628, 629, 632, 634, 635, 635, 637, 638, 639, 641, 642, 642, 643, 643, 644, 644, 644, 644, 645, 645, 646, 648, 649, 649, 650, 652, 653, 653, 655, 655, 657, 657, 658, 658, 658, 662, 662, 665, 665, 666, 666, 668, 670, 671, 671, 672, 672, 673, 674, 675, 675, 678, 678, 681, 687, 687, 689, 691, 691, 692, 693, 694, 695, 695, 696, 698, 702, 702, 703, 704, 706, 707, 708, 708, 709, 709, 711, 711, 712, 714, 714, 716, 716, 716, 716, 716, 716, 719, 719, 719, 720, 722, 722, 722, 725, 725, 728, 729, 730, 730, 732, 733, 733, 734, 734, 734, 735, 736, 737, 738, 738, 740, 742, 743, 745, 745, 746, 747, 748, 749, 750, 752, 752, 753, 755, 757, 758, 758, 761, 761, 762, 762, 762, 762, 764, 764, 766, 766, 767, 768, 768, 768, 769, 772, 775, 777, 779, 781, 782, 783, 784, 784, 784, 785, 786, 787, 788, 789, 789, 790, 791, 791, 792, 796, 796, 796, 798, 798, 798, 799, 801, 801, 802, 803, 805, 805, 806, 807, 807, 808, 809, 809, 812, 813, 813, 816, 817, 817, 818, 819, 820, 821, 822, 823, 824, 824, 827, 829, 830, 831, 832, 834, 835, 836, 837, 837, 837, 837, 839, 839, 840, 842, 842, 842, 845, 847, 848, 848, 849, 850, 855, 855, 857, 859, 859, 859, 861, 861, 863, 865, 865, 866, 866, 866, 868, 868, 869, 870, 871, 871, 872, 873, 873, 878, 878, 878, 878, 881, 883, 887, 887, 889, 889, 891, 891, 893, 894, 894, 894, 895, 895, 897, 897, 898, 900, 900, 901, 902, 902, 903, 904, 905, 906, 907, 907, 908, 908, 908, 910, 911, 912, 912, 913, 913, 914, 914, 915, 915, 915, 917, 917, 917, 917, 919, 920, 921, 922, 923, 923, 924, 926, 926, 926, 927, 929, 930, 932, 932, 932, 933, 935, 937, 938, 940, 940, 940, 941, 943, 943, 944, 947, 951, 951, 951, 952, 952, 955, 956, 957, 957, 961, 962, 962, 963, 964, 965, 965, 966, 966, 967, 967, 967, 968, 969, 971, 971, 971, 973, 973, 974, 976, 977, 977, 977, 980, 980, 980, 981, 981, 982, 983, 984, 984, 985, 986, 987, 987, 990, 991, 992, 992, 993, 993, 994, 995, 995, 998];
const data_1000_worst = [998, 995, 995, 994, 993, 993, 992, 992, 991, 990, 987, 987, 986, 985, 984, 984, 983, 982, 981, 981, 980, 980, 980, 977, 977, 977, 976, 974, 973, 973, 971, 971, 971, 969, 968, 967, 967, 967, 966, 966, 965, 965, 964, 963, 962, 962, 961, 957, 957, 956, 955, 952, 952, 951, 951, 951, 947, 944, 943, 943, 941, 940, 940, 940, 938, 937, 935, 933, 932, 932, 932, 930, 929, 927, 926, 926, 926, 924, 923, 923, 922, 921, 920, 919, 917, 917, 917, 917, 915, 915, 915, 914, 914, 913, 913, 912, 912, 911, 910, 908, 908, 908, 907, 907, 906, 905, 904, 903, 902, 902, 901, 900, 900, 898, 897, 897, 895, 895, 894, 894, 894, 893, 891, 891, 889, 889, 887, 887, 883, 881, 878, 878, 878, 878, 873, 873, 872, 871, 871, 870, 869, 868, 868, 866, 866, 866, 865, 865, 863, 861, 861, 859, 859, 859, 857, 855, 855, 850, 849, 848, 848, 847, 845, 842, 842, 842, 840, 839, 839, 837, 837, 837, 837, 836, 835, 834, 832, 831, 830, 829, 827, 824, 824, 823, 822, 821, 820, 819, 818, 817, 817, 816, 813, 813, 812, 809, 809, 808, 807, 807, 806, 805, 805, 803, 802, 801, 801, 799, 798, 798, 798, 796, 796, 796, 792, 791, 791, 790, 789, 789, 788, 787, 786, 785, 784, 784, 784, 783, 782, 781, 779, 777, 775, 772, 769, 768, 768, 768, 767, 766, 766, 764, 764, 762, 762, 762, 762, 761, 761, 758, 758, 757, 755, 753, 752, 752, 750, 749, 748, 747, 746, 745, 745, 743, 742, 740, 738, 738, 737, 736, 735, 734, 734, 734, 733, 733, 732, 730, 730, 729, 728, 725, 725, 722, 722, 722, 720, 719, 719, 719, 716, 716, 716, 716, 716, 716, 714, 714, 712, 711, 711, 709, 709, 708, 708, 707, 706, 704, 703, 702, 702, 698, 696, 695, 695, 694, 693, 692, 691, 691, 689, 687, 687, 681, 678, 678, 675, 675, 674, 673, 672, 672, 671, 671, 670, 668, 666, 666, 665, 665, 662, 662, 658, 658, 658, 657, 657, 655, 655, 653, 653, 652, 650, 649, 649, 648, 646, 645, 645, 644, 644, 644, 644, 643, 643, 642, 642, 641, 639, 638, 637, 635, 635, 634, 632, 629, 628, 625, 624, 622, 621, 620, 620, 619, 619, 617, 617, 617, 613, 611, 607, 606, 605, 603, 602, 601, 601, 601, 600, 599, 596, 596, 595, 594, 593, 591, 588, 588, 587, 586, 585, 583, 583, 582, 582, 580, 578, 578, 575, 575, 575, 574, 573, 573, 572, 572, 571, 569, 569, 568, 568, 568, 566, 565, 565, 563, 561, 559, 554, 554, 549, 548, 546, 545, 545, 545, 544, 544, 543, 543, 543, 542, 542, 542, 541, 540, 539, 539, 539, 539, 537, 536, 533, 532, 532, 529, 528, 526, 525, 524, 523, 522, 521, 521, 519, 519, 518, 518, 518, 517, 517, 516, 515, 515, 514, 514, 514, 512, 508, 508, 506, 506, 506, 502, 501, 500, 499, 499, 498, 498, 497, 495, 493, 491, 490, 489, 488, 488, 488, 487, 486, 485, 483, 482, 482, 481, 481, 480, 480, 480, 479, 478, 478, 478, 477, 474, 472, 472, 471, 470, 469, 468, 468, 467, 467, 466, 466, 465, 464, 462, 460, 459, 459, 459, 458, 456, 456, 456, 455, 454, 453, 453, 452, 452, 451, 451, 450, 448, 448, 448, 448, 447, 446, 446, 446, 445, 445, 444, 444, 443, 443, 442, 441, 439, 438, 438, 432, 432, 431, 431, 428, 426, 420, 418, 418, 417, 417, 415, 414, 414, 413, 413, 412, 411, 411, 407, 406, 401, 401, 399, 399, 399, 399, 399, 397, 396, 394, 393, 393, 393, 392, 389, 386, 385, 385, 384, 383, 380, 379, 376, 376, 375, 375, 373, 371, 371, 370, 370, 367, 366, 365, 363, 361, 359, 358, 358, 355, 354, 353, 352, 350, 349, 347, 347, 347, 346, 345, 345, 345, 345, 343, 343, 342, 340, 340, 339, 338, 338, 338, 337, 336, 335, 333, 332, 331, 331, 329, 327, 327, 327, 324, 323, 321, 321, 321, 320, 318, 318, 318, 317, 316, 316, 315, 313, 311, 308, 308, 307, 306, 306, 305, 305, 305, 304, 304, 303, 303, 303, 303, 303, 301, 300, 298, 297, 297, 296, 295, 294, 292, 292, 292, 290, 290, 289, 289, 288, 287, 287, 284, 284, 284, 283, 283, 283, 282, 280, 280, 278, 277, 276, 273, 273, 272, 271, 271, 269, 267, 267, 266, 264, 263, 262, 262, 261, 261, 261, 261, 260, 259, 258, 257, 256, 256, 255, 255, 254, 253, 253, 253, 251, 251, 249, 249, 247, 244, 244, 242, 241, 240, 239, 238, 235, 234, 234, 232, 230, 230, 229, 228, 228, 228, 226, 225, 220, 220, 220, 219, 218, 218, 218, 217, 216, 212, 212, 212, 211, 211, 211, 211, 210, 208, 207, 206, 203, 202, 201, 201, 201, 201, 201, 200, 200, 199, 197, 196, 196, 195, 194, 194, 193, 192, 192, 190, 189, 189, 189, 187, 184, 181, 181, 180, 180, 180, 177, 176, 175, 175, 174, 174, 173, 172, 171, 171, 167, 166, 166, 166, 164, 162, 160, 159, 157, 157, 156, 156, 156, 155, 155, 154, 154, 153, 150, 149, 149, 149, 148, 148, 148, 146, 145, 144, 144, 143, 141, 140, 140, 140, 139, 138, 138, 138, 138, 135, 134, 134, 134, 130, 130, 126, 126, 125, 122, 122, 122, 122, 122, 121, 111, 111, 108, 108, 107, 107, 105, 103, 102, 101, 101, 96, 96, 93, 88, 88, 87, 86, 86, 86, 82, 81, 79, 79, 78, 78, 76, 75, 73, 71, 66, 65, 65, 64, 64, 63, 63, 63, 60, 60, 58, 58, 58, 56, 54, 52, 51, 50, 50, 47, 46, 44, 44, 44, 41, 41, 40, 39, 36, 36, 35, 33, 33, 33, 33, 31, 31, 31, 30, 30, 30, 28, 28, 27, 26, 26, 25, 25, 25, 24, 18, 18, 17, 17, 16, 15, 14, 13, 12, 11, 11, 10, 10, 8, 7, 7, 6, 3, 3, 2, 2, 2, 1];


run_data(data_10, data_10_worst, data_10_best, 10);
run_data(data_100, data_100_worst, data_100_best, 100);
run_data(data_1000, data_1000_worst, data_1000_best, 1000);